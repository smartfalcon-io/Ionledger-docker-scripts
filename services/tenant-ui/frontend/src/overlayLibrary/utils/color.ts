/**
 * Generates a pseudorandom number between 0 and 1 based on a seed
 * @see https://gist.github.com/tommyettinger/46a874533244883189143505d203312c
 * @see https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript
 * @param { number } seed any number
 * @returns { number } pseudorandom number between 0 and 1
 */
const mulberry32 = (seed: number) => {
  let t = (seed += 0x6d2b79f5);
  t = Math.imul(t ^ (t >>> 15), t | 1);
  t ^= t + Math.imul(t ^ (t >>> 7), t | 61);
  return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
};

/**
 * Generates a numerical hash based on a given string
 * @see https://stackoverflow.com/questions/3426404/create-a-hexadecimal-colour-based-on-a-string-with-javascript
 * @param { string } s given string
 * @returns { number } numerical hash value
 */
const hashCode = (s: string): number => {
  return s
    .split('')
    .reduce((hash, char) => char.charCodeAt(0) + ((hash << 5) - hash), 0);
};

/**
 * Converts a numerical hash into a hexidecimal color string
 * @see https://helderesteves.com/generating-random-colors-js/#Generating_random_dark_colors
 * @param { number } hash numerical hash value (generated by hashCode function above)
 * @returns { string } hexidecimal string eg. #32d3cc
 */
const hashToRGBA = (hash: number) => {
  let color = '#';
  const colorRangeUpperBound = 256;

  // once for r, g, b
  for (let i = 0; i < 3; i++) {
    // append a pseudorandom two-char hexidecimal value from the lower half of the color spectrum (to limit to darker colors)
    color += (
      '0' +
      Math.floor((mulberry32(hash + i) * colorRangeUpperBound) / 2).toString(16)
    ).slice(-2);
  }

  return color;
};

/**
 * Converts a hexidecimal color string into a luminance value
 * @param hex color string in hexidecimal format
 * @returns number between 0 and 255
 */
const luminanceForHexColor = (hex: string): number | undefined => {
  if (!/^#([A-Fa-f0-9]{6})$/.test(hex)) {
    return;
  }

  const hexAsNumber = Number(`0x${hex.slice(1)}`);
  const [r, g, b] = [
    (hexAsNumber >> 16) & 255,
    (hexAsNumber >> 8) & 255,
    hexAsNumber & 255,
  ];
  // Scalars below defined [here](https://en.wikipedia.org/wiki/Relative_luminance)
  const y = 0.2126 * r + 0.7152 * g + 0.0722 * b;

  return Math.round(y);
};

export const generateColor = (seed: string) => {
  return hashToRGBA(hashCode(seed));
};

export const textColorForBackground = (background: string) => {
  const spectrum = {
    black: '#000000',
    darkGrey: '#313132',
    mediumGrey: '#606060',
    lightGrey: '#D3D3D3',
    veryLightGrey: '#F2F2F2',
    white: '#FFFFFF',
  };

  const midpoint = 255 / 2;
  if ((luminanceForHexColor(background ?? '') ?? 0) >= midpoint) {
    return spectrum.darkGrey;
  }
  return spectrum.white;
};
